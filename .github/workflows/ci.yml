name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: 依存関係インストール
      run: npm ci --legacy-peer-deps
    
    - name: TypeScript 型チェック
      run: npm run build
    
    - name: ESLint 実行
      run: npm run lint
  
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Python セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Python 構文チェック
      run: |
        python -m py_compile main.py
        python -m py_compile app/**/*.py
    
    - name: テスト実行
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        GEMINI_API_KEY: test_key
        JWT_SECRET: test_secret
        REFRESH_TOKEN_SECRET: test_refresh_secret
  
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Docker Compose ビルドテスト
      run: |
        docker-compose -f docker-compose.yml build
    
    - name: Docker Compose 起動テスト
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml down